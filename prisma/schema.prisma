generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employee {
  id           Int            @id @default(autoincrement())
  firstName    String
  lastName     String
  position     String?
  department   String?
  startDate    DateTime       @default(now()) @db.Timestamp(0)
  mobile       String?        @unique
  email        String?        @unique
  password     String
  profileImage String?
  coverImage   String?
  createdAt    DateTime       @default(now()) @db.Timestamp(0)
  updatedAt    DateTime       @updatedAt @db.Timestamp(0)
  role         Role           @default(USER)
  Attendance   Attendance[]
  leaves       Leave[]        @relation("employeeLeaves")
  approvals    Leave[]        @relation("approverLeaves")
  LeaveBalance LeaveBalance[]
  refreshToken RefreshToken[]
}

enum Role {
  USER
  ADMIN
}

enum LeaveStatus {
  pending
  approved
  rejected
}

model Attendance {
  id         Int       @id @default(autoincrement())
  date       String
  checkIn    DateTime?
  checkOut   DateTime?
  location   String?
  isLate     Boolean   @default(false)
  employeeId Int
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade) // <-- เพิ่ม onDelete

  @@unique([employeeId, date], name: "employeeId_date")
}

model Holiday {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LeaveType {
  id           Int            @id @default(autoincrement())
  name         String
  maxDays      Int
  leaves       Leave[]
  LeaveBalance LeaveBalance[]
}

model Leave {
  id           Int         @id @default(autoincrement())
  leaveTypeId  Int
  employeeId   Int
  startDate    DateTime
  endDate      DateTime
  status       LeaveStatus @default(pending)
  approvedBy   Int?
  reason       String?     
  rejectReason String?
  leaveType    LeaveType   @relation(fields: [leaveTypeId], references: [id], onDelete: Cascade)
  employee     Employee    @relation("employeeLeaves", fields: [employeeId], references: [id], onDelete: Cascade)
  approver     Employee?   @relation("approverLeaves", fields: [approvedBy], references: [id], onDelete: SetNull)

  @@index([leaveTypeId])
  @@index([employeeId])
  @@index([approvedBy])
}

model LeaveBalance {
  id          Int       @id @default(autoincrement())
  employeeId  Int
  leaveTypeId Int
  usedDays    Int       @default(0)
  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade) // <-- เพิ่ม onDelete
  leaveType   LeaveType @relation(fields: [leaveTypeId], references: [id], onDelete: Cascade) // <-- เพิ่ม onDelete

  @@unique([employeeId, leaveTypeId])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      Employee @relation(fields: [userId], references: [id], onDelete: Cascade) // <-- เพิ่ม onDelete
  createdAt DateTime @default(now())
  expiresAt DateTime
  ipAddress String?
  userAgent String?
}